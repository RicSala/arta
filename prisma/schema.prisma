// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js" // Specify the Prisma client - 
}

datasource db {
  provider = "mongodb" // Specify the MongoDB database adapter
  url      = env("MONGO_URL")
}

model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  // name type decorator defaultauto map-to-mongo-_id ??
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  hashedPassword  String?
  confirmPassword String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  role            UserRole  @default(CLIENT)

  // RELATIONS
  accounts     Account[]
  artist       ArtistProfile?
  savedTattoos SavedTattoo[]
  savedArtists SavedArtist[]
  likedTattoos LikedTattoo[]
  likedArtists LikedArtist[]

  // messages Message[]
}

// TODO: change from saves to savedTattoos

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String // REVIEW:  what is the db.String decorator for?
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  // RELATIONS
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId]) // the combination of provider and providerAccountId must be unique
}

model ArtistProfile {
  // DB fields
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique @db.ObjectId // relation scalar field (used in the `@relation` attribute above
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Profile fields
  artisticName    String?       @unique
  bio             String?
  location        String?
  phone           String?
  website         String?
  instagram       String?
  facebook        String?
  twitter         String?
  youtube         String?
  tiktok          String?
  mainImage       String?
  images          String[]
  styles          String[]
  pricePerHour    Int?
  pricePerSession Int?
  maxPrice        Int?
  tattoos         Tattoo[]
  saves           SavedArtist[]
  likes           LikedArtist[]
}

model Tattoo {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  description String
  imageSrc    String
  category    String
  bodyPart    String
  style       Styles?
  // numLikes      Int      @default(0)

  // RELATIONS
  artistProfileId String?        @db.ObjectId
  artistProfile   ArtistProfile? @relation(fields: [artistProfileId], references: [id])

  saves SavedTattoo[]
  likes LikedTattoo[]
}

enum UserRole {
  ADMIN
  CLIENT
  ARTIST
}

enum Styles {
  Anime                     @map("Anime")
  Negro_y_Gris              @map("Negro y Gris")
  Trabajo_Negro             @map("Trabajo Negro")
  Chicano                   @map("Chicano")
  Puntillismo               @map("Puntillismo")
  Floral                    @map("Floral")
  Linea_Fina                @map("Linea Fina")
  Geometrico                @map("Geometrico")
  Hecho_a_Mano              @map("Hecho a Mano")
  Micro_Realismo            @map("Micro Realismo")
  Arte_Oscuro               @map("Arte Oscuro")
  Japones_Irezumi           @map("Japonés (Irezumi)")
  Letras_Audaces            @map("Letras Audaces")
  Letras_Pequenas           @map("Letras Pequeñas")
  Neo_Tradicional           @map("Neo Tradicional")
  Nueva_Escuela             @map("Nueva Escuela")
  Ornamental                @map("Ornamental")
  Realismo                  @map("Realismo")
  Ilustrativo               @map("Ilustrativo")
  Vieja_Escuela_Tradicional @map("Vieja Escuela (Tradicional)")
  Estilo_Trash_Polka        @map("Estilo Trash Polka")
  Tribal                    @map("Tribal")
  Acuarela                  @map("Acuarela")
  Surrealismo               @map("Surrealismo")
  Cosmetico                 @map("Cosmetico")
  Ignorante                 @map("Ignorante")
}

model SavedTattoo {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tattooId String @db.ObjectId
  tattoo   Tattoo @relation(fields: [tattooId], references: [id], onDelete: Cascade)

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, tattooId])
}

// saved Artist
model SavedArtist {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  artistProfileId String        @db.ObjectId
  artistProfile   ArtistProfile @relation(fields: [artistProfileId], references: [id], onDelete: Cascade)

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, artistProfileId])
}

// liked tattoo
model LikedTattoo {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tattooId String @db.ObjectId
  tattoo   Tattoo @relation(fields: [tattooId], references: [id], onDelete: Cascade)

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, tattooId])
}

// liked artist
model LikedArtist {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  artistProfileId String        @db.ObjectId
  artistProfile   ArtistProfile @relation(fields: [artistProfileId], references: [id], onDelete: Cascade)

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, artistProfileId])
}
